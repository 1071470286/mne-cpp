#ifndef COLORTABLE_H
#define COLORTABLE_H


//*************************************************************************************************************
//=============================================================================================================
// QT INCLUDES
//=============================================================================================================

#include <QString>
#include <QStringList>


//*************************************************************************************************************
//=============================================================================================================
// Eigen INCLUDES
//=============================================================================================================

#include "../3rdParty/Eigen/Core"


//*************************************************************************************************************
//=============================================================================================================
// DEFINE NAMESPACE FSLIB
//=============================================================================================================

namespace FSLIB
{

//*************************************************************************************************************
//=============================================================================================================
// USED NAMESPACES
//=============================================================================================================

using namespace Eigen;


class Colortable
{
public:
    Colortable();

    inline VectorXi getAvailableROIs()
    {
        VectorXi p_vecRois;
        if (table.cols() == 5)
            p_vecRois = table.block(0,4,table.rows(),1);

        return p_vecRois;
    }

QString orig_tab;
qint32 numEntries;
QStringList struct_names;
MatrixXi table;

};

} // NAMESPACE

#endif // COLORTABLE_H
