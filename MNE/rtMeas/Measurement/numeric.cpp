//=============================================================================================================
/**
* @file		numeric.cpp
* @author	Christoph Dinh <christoph.dinh@live.de>;
* @version	1.0
* @date		October, 2010
*
* @section	LICENSE
*
* Copyright (C) 2010 Christoph Dinh. All rights reserved.
*
* No part of this program may be photocopied, reproduced,
* or translated to another program language without the
* prior written consent of the author.
*
*
* @brief	Contains the implementation of the Numeric class.
*
*/

//*************************************************************************************************************
//=============================================================================================================
// INCLUDES
//=============================================================================================================

#include "numeric.h"


//*************************************************************************************************************
//=============================================================================================================
// USED NAMESPACES
//=============================================================================================================

using namespace RTMEASLIB;


//*************************************************************************************************************
//=============================================================================================================
// DEFINE MEMBER METHODS
//=============================================================================================================

Numeric::Numeric()
: Measurement()
, m_qString_Unit("")
, m_dValue(-1)

{

}


//*************************************************************************************************************

Numeric::~Numeric()
{

}


//*************************************************************************************************************

void Numeric::setValue(double v)
{
    m_dValue = v;
    notify();
}


//*************************************************************************************************************

double Numeric::getValue() const
{
    return m_dValue;
}
